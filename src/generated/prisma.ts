import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding';
import { GraphQLResolveInfo } from 'graphql';

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Author implements Node {
  id: ID!
  name: String!
  slug: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: AuthorWhereInput): Author!
}


#
# Other Types
#

type AggregateAuthor {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  name: String!
  slug: String!
  posts: PostCreateManyWithoutAuthorInput
}

input AuthorCreateOneWithoutPostsInput {
  create: AuthorCreateWithoutPostsInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateWithoutPostsInput {
  name: String!
  slug: String!
}

type AuthorEdge {
  node: Author!
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String!
  slug: String!
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  AND: [AuthorSubscriptionWhereInput!]
  OR: [AuthorSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  name: String
  slug: String
  posts: PostUpdateManyWithoutAuthorInput
}

input AuthorUpdateOneWithoutPostsInput {
  create: AuthorCreateWithoutPostsInput
  connect: AuthorWhereUniqueInput
  disconnect: AuthorWhereUniqueInput
  delete: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutPostsInput
  upsert: AuthorUpsertWithoutPostsInput
}

input AuthorUpdateWithoutPostsDataInput {
  name: String
  slug: String
}

input AuthorUpdateWithoutPostsInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutPostsDataInput!
}

input AuthorUpsertWithoutPostsInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutPostsDataInput!
  create: AuthorCreateWithoutPostsInput!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
  slug: String
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createAuthor(data: AuthorCreateInput!): Author!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  deletePost(where: PostWhereUniqueInput!): Post
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyAuthors(data: AuthorUpdateInput!, where: AuthorWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: AuthorCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: AuthorUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: AuthorWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  post(where: PostWhereUniqueInput!): Post
  author(where: AuthorWhereUniqueInput!): Author
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
}
`;

export type PostOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'isPublished_ASC'
  | 'isPublished_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC';

export type AuthorOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface AuthorCreateWithoutPostsInput {
  name: String;
  slug: String;
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  author?: AuthorWhereInput;
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean;
  title: String;
  text: String;
}

export interface AuthorWhereInput {
  AND?: AuthorWhereInput[] | AuthorWhereInput;
  OR?: AuthorWhereInput[] | AuthorWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
}

export interface AuthorUpdateInput {
  name?: String;
  slug?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
  author?: AuthorUpdateOneWithoutPostsInput;
}

export interface AuthorUpsertWithoutPostsInput {
  where: AuthorWhereUniqueInput;
  update: AuthorUpdateWithoutPostsDataInput;
  create: AuthorCreateWithoutPostsInput;
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
}

export interface AuthorUpdateWithoutPostsDataInput {
  name?: String;
  slug?: String;
}

export interface AuthorWhereUniqueInput {
  id?: ID_Input;
  slug?: String;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  text: String;
  author: AuthorCreateOneWithoutPostsInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface AuthorCreateOneWithoutPostsInput {
  create?: AuthorCreateWithoutPostsInput;
  connect?: AuthorWhereUniqueInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?: PostUpdateWithoutAuthorInput[] | PostUpdateWithoutAuthorInput;
  upsert?: PostUpsertWithoutAuthorInput[] | PostUpsertWithoutAuthorInput;
}

export interface AuthorUpdateOneWithoutPostsInput {
  create?: AuthorCreateWithoutPostsInput;
  connect?: AuthorWhereUniqueInput;
  disconnect?: AuthorWhereUniqueInput;
  delete?: AuthorWhereUniqueInput;
  update?: AuthorUpdateWithoutPostsInput;
  upsert?: AuthorUpsertWithoutPostsInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface AuthorCreateInput {
  name: String;
  slug: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface AuthorUpdateWithoutPostsInput {
  where: AuthorWhereUniqueInput;
  data: AuthorUpdateWithoutPostsDataInput;
}

export interface AuthorSubscriptionWhereInput {
  AND?: AuthorSubscriptionWhereInput[] | AuthorSubscriptionWhereInput;
  OR?: AuthorSubscriptionWhereInput[] | AuthorSubscriptionWhereInput;
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthorWhereInput;
}

export interface PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostWhereUniqueInput {
  id?: ID_Input;
}

export interface Node {
  id: ID_Output;
}

export interface AuthorPreviousValues {
  id: ID_Output;
  name: String;
  slug: String;
}

export interface BatchPayload {
  count: Long;
}

export interface Post extends Node {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
  author: Author;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
  aggregate: AggregatePost;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node?: Post;
  updatedFields?: String[];
  previousValues?: PostPreviousValues;
}

export interface AggregateAuthor {
  count: Int;
}

export interface PostPreviousValues {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface Author extends Node {
  id: ID_Output;
  name: String;
  slug: String;
  posts?: Post[];
}

export interface AuthorEdge {
  node: Author;
  cursor: String;
}

export interface AuthorSubscriptionPayload {
  mutation: MutationType;
  node?: Author;
  updatedFields?: String[];
  previousValues?: AuthorPreviousValues;
}

export interface AuthorConnection {
  pageInfo: PageInfo;
  edges: AuthorEdge[];
  aggregate: AggregateAuthor;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface AggregatePost {
  count: Int;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export interface Schema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export type Query = {
  posts: (
    args: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post[]>;
  authors: (
    args: {
      where?: AuthorWhereInput;
      orderBy?: AuthorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author[]>;
  post: (
    args: { where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post | null>;
  author: (
    args: { where: AuthorWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author | null>;
  postsConnection: (
    args: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<PostConnection>;
  authorsConnection: (
    args: {
      where?: AuthorWhereInput;
      orderBy?: AuthorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<AuthorConnection>;
  node: (
    args: { id: ID_Output },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Node | null>;
};

export type Mutation = {
  createPost: (
    args: { data: PostCreateInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post>;
  createAuthor: (
    args: { data: AuthorCreateInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author>;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post | null>;
  updateAuthor: (
    args: { data: AuthorUpdateInput; where: AuthorWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author | null>;
  deletePost: (
    args: { where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post | null>;
  deleteAuthor: (
    args: { where: AuthorWhereUniqueInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author | null>;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Post>;
  upsertAuthor: (
    args: {
      where: AuthorWhereUniqueInput;
      create: AuthorCreateInput;
      update: AuthorUpdateInput;
    },
    info?: GraphQLResolveInfo | string,
  ) => Promise<Author>;
  updateManyPosts: (
    args: { data: PostUpdateInput; where: PostWhereInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<BatchPayload>;
  updateManyAuthors: (
    args: { data: AuthorUpdateInput; where: AuthorWhereInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<BatchPayload>;
  deleteManyPosts: (
    args: { where: PostWhereInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<BatchPayload>;
  deleteManyAuthors: (
    args: { where: AuthorWhereInput },
    info?: GraphQLResolveInfo | string,
  ) => Promise<BatchPayload>;
};

export type Subscription = {
  post: (
    args: { where?: PostSubscriptionWhereInput },
    infoOrQuery?: GraphQLResolveInfo | string,
  ) => Promise<AsyncIterator<PostSubscriptionPayload>>;
  author: (
    args: { where?: AuthorSubscriptionWhereInput },
    infoOrQuery?: GraphQLResolveInfo | string,
  ) => Promise<AsyncIterator<AuthorSubscriptionPayload>>;
};

export class Prisma extends BasePrisma {
  constructor({
    endpoint,
    secret,
    fragmentReplacements,
    debug,
  }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Post: (where: PostWhereInput): Promise<boolean> =>
      super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    Author: (where: AuthorWhereInput): Promise<boolean> =>
      super.existsDelegate('query', 'authors', { where }, {}, '{ id }'),
  };

  query: Query = {
    posts: (args, info): Promise<Post[]> =>
      super.delegate('query', 'posts', args, {}, info),
    authors: (args, info): Promise<Author[]> =>
      super.delegate('query', 'authors', args, {}, info),
    post: (args, info): Promise<Post | null> =>
      super.delegate('query', 'post', args, {}, info),
    author: (args, info): Promise<Author | null> =>
      super.delegate('query', 'author', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> =>
      super.delegate('query', 'postsConnection', args, {}, info),
    authorsConnection: (args, info): Promise<AuthorConnection> =>
      super.delegate('query', 'authorsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> =>
      super.delegate('query', 'node', args, {}, info),
  };

  mutation: Mutation = {
    createPost: (args, info): Promise<Post> =>
      super.delegate('mutation', 'createPost', args, {}, info),
    createAuthor: (args, info): Promise<Author> =>
      super.delegate('mutation', 'createAuthor', args, {}, info),
    updatePost: (args, info): Promise<Post | null> =>
      super.delegate('mutation', 'updatePost', args, {}, info),
    updateAuthor: (args, info): Promise<Author | null> =>
      super.delegate('mutation', 'updateAuthor', args, {}, info),
    deletePost: (args, info): Promise<Post | null> =>
      super.delegate('mutation', 'deletePost', args, {}, info),
    deleteAuthor: (args, info): Promise<Author | null> =>
      super.delegate('mutation', 'deleteAuthor', args, {}, info),
    upsertPost: (args, info): Promise<Post> =>
      super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertAuthor: (args, info): Promise<Author> =>
      super.delegate('mutation', 'upsertAuthor', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> =>
      super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyAuthors: (args, info): Promise<BatchPayload> =>
      super.delegate('mutation', 'updateManyAuthors', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> =>
      super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyAuthors: (args, info): Promise<BatchPayload> =>
      super.delegate('mutation', 'deleteManyAuthors', args, {}, info),
  };

  subscription: Subscription = {
    post: (
      args,
      infoOrQuery,
    ): Promise<AsyncIterator<PostSubscriptionPayload>> =>
      super.delegateSubscription('post', args, {}, infoOrQuery),
    author: (
      args,
      infoOrQuery,
    ): Promise<AsyncIterator<AuthorSubscriptionPayload>> =>
      super.delegateSubscription('author', args, {}, infoOrQuery),
  };
}
